generator client {
  provider      = "prisma-client-js"
  // One for local dev, one for nodejs docker
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String?
  passwordHash String?

  name              String  @unique
  country           String  @default("INTERNET")
  sensitiveMatching Boolean @default(false)

  // Auth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userPaths UserPath[]
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uniqueSummary String
  datetime      DateTime

  // If the conversation is part of the common conversations of a serendipitous path
  serendipitousPath   SerendipitousPath? @relation(fields: [serendipitousPathId], references: [id])
  serendipitousPathId String?

  // If the conversation is part of the unique conversations of a serendipitous path
  userPath   UserPath? @relation(fields: [userPathId], references: [id])
  userPathId String?
}

model SerendipitousPath {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commonSummary String
  score         Float

  commonConversations Conversation[]

  // Through this relation, we can get the unique conversations for each user of a serendipitous path
  userPaths UserPath[]
}

// New join table between User and SerendipitousPath
model UserPath {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Links user and serendipitous path
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  path   SerendipitousPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId String

  uniqueConversations Conversation[]

  @@unique([userId, pathId])
}

// -------------------- Auth.js models --------------------
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
